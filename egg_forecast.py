# -*- coding: utf-8 -*-
"""Egg Forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U-rRtmWd2osTGeh8XEF-6n9zTt2Ykn1D
"""

pip install Prophet

import pandas as pd
from pandas import read_csv
from pandas import to_datetime
from pandas import DataFrame
from prophet import Prophet
from matplotlib import pyplot
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import accuracy_score

df = pd.read_csv('Data-eggs.csv')

df.columns = ['ds', 'y']
df['ds']= pd.to_datetime(df['ds'])

model = Prophet()

model.fit(df)

future = list()
for i in range(1, 13):
	date = '2023-%01d' % i
	future.append([date])
future = DataFrame(future)
future.columns = ['ds']
future['ds']= to_datetime(future['ds'])

forecast = model.predict(future)

print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())

y_true = df['y'][-12:].values
y_pred = forecast['yhat'].values
mae = mean_absolute_error(y_true, y_pred)
print('MAE: %.3f' % mae)

print(y_pred)

model.plot(forecast)
pyplot.show()

from sklearn.metrics import mean_squared_error
mean_squared_error(y_true, y_pred)

from sklearn.metrics import mean_absolute_percentage_error
mape = mean_absolute_percentage_error(y_true , y_pred)
rmse = mean_squared_error(y_true , y_pred , squared = False)
accuracy = 100 - mape

print(f'Actual Values :{list(y_true)}')
print(f'predicted Values :{list(y_pred)}')

print(f'MAPE: {mape*100:.2f}%')
print(f'RMSE: {rmse:.2f}')
print(f'accuracy:{accuracy:.2f}%')

def predic_function():
  return list(y_pred)

print(list(y_pred))

import pickle

# export the trained model as a pickle file
with open('prophet_model.pkl', 'wb') as f:
    pickle.dump(model, f)

predict=[]
for item in y_pred:
  predict.append(int(item))

print(predict)

import joblib

# train and evaluate the model here

# export the model
joblib.dump(list(predict), 'model.pkl')
pList = joblib.load('model.pkl')
print(pList)

data = {'Prediction': list(predict)}
df = pd.DataFrame(data)

# Write dataframe to Excel file
writer = pd.ExcelWriter('output.xlsx')
df.to_excel(writer, index=False)
writer.save()

# Download Excel file
from google.colab import files
files.download('output.xlsx')